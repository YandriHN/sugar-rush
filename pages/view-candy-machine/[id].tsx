import type { NextPage } from 'next'
import { useRouter } from 'next/router'
import { Title, CheckConnectedWallet, Carousel, Spinner } from 'components/Layout'
import Head from 'next/head'
import { useWallet } from '@solana/wallet-adapter-react'
import { useEffect, useState } from 'react'
import { CANDY_MACHINE_PROGRAM_V2_ID, TOKEN_METADATA_PROGRAM_ID, MAX_METADATA_LEN, CREATOR_ARRAY_START } from 'lib/constants'
import { PublicKey } from '@solana/web3.js';
import { useConnection } from '@solana/wallet-adapter-react'
import bs58 from 'bs58';
import { Token } from 'lib/interfaces'

const ViewCandyMachine: NextPage = () => {
const router = useRouter()
const account = router.query.id
const { connected } = useWallet()
const [tokens, setTokens] = useState<Token[]>([])
const [isLoading, setIsLoading] = useState(false)
const [message, setMessage] = useState('')
const { connection } = useConnection()

  const getMintAddresses = async (firstCreatorAddress: PublicKey) => {    
    const metadataAccounts = await connection.getProgramAccounts(
      TOKEN_METADATA_PROGRAM_ID,
      {
        // The mint address is located at byte 33 and lasts for 32 bytes.
        dataSlice: { offset: 33, length: 32 },
  
        filters: [
          // Only get Metadata accounts.
          { dataSize: MAX_METADATA_LEN },
  
          // Filter using the first creator.
          {
            memcmp: {
              offset: CREATOR_ARRAY_START,
              bytes: firstCreatorAddress.toBase58(),
            },
          },
        ],
      },
    );
  
    return metadataAccounts.map((metadataAccountInfo) => (
      bs58.encode(metadataAccountInfo.account.data)
    ));
  };

  const getCandyMachineCreator = async (candyMachine: PublicKey): Promise<[PublicKey, number]> => (
    PublicKey.findProgramAddress(
      [Buffer.from('candy_machine'), candyMachine.toBuffer()],
      CANDY_MACHINE_PROGRAM_V2_ID,
    )
  );

  async function getTokens() {    
    if (!account) return
    setIsLoading(true)
    setMessage('')
    setTokens([])
    const candyMachineCreator = await getCandyMachineCreator(new PublicKey(account));       
    const getMint = await getMintAddresses(candyMachineCreator[0]);

    if (getMint.length === 0) {
      setMessage('No tokens found')
    } else {
      const result = []
      for (let i = 0; i < getMint.length; i++) {
        let fetchData = await fetch(`https://${
          connection.rpcEndpoint.includes('devnet')
            ? 'api-devnet'
            : ''}.solscan.io/account?address=${getMint[i]}`)
        let data = await fetchData.json()
        let fetchArweave = await fetch(data.data?.metadata?.data?.uri)
        let arweaveData = await fetchArweave.json()
        let tokenData = {
          name: arweaveData.name,
          imageLink: arweaveData.image,
        }
        result.push(tokenData)
      }
      setTokens(result)
    }    
      
    setIsLoading(false)
  }

  useEffect(() => {
    getTokens()
  }, [])

  return (
    <>
      <Head>
        <title>View Candy Machine Tokens</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      {connected ? (
        <div className='flex justify-center items-center flex-col text-center'>
          <Title text='View Candy Machine Tokens' />
          <span className='mt-8'>
            {account}{' '}
            <a
              className='text-blue-700'
              href={`https://solscan.io/account/${account}${
                connection.rpcEndpoint.includes('devnet')
                  ? '?cluster=devnet'
                  : ''
              }`}
              target='_blank'
              rel='noopener noreferrer'
            >
              View in Solscan
            </a>
          </span>
          {isLoading  && <Spinner />}
          {message.length !== 0 ? <span className='mt-8'>{message}</span> : <Carousel token={tokens} />}
        </div>
      ) : (
        <CheckConnectedWallet />
      )}
    </>
  )
}

export default ViewCandyMachine
